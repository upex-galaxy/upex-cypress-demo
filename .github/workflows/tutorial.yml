#!ESTE ARCHIVO ES UN TEMPLATE, NO CAMBIARLO EN ABSOLUTO.
#todo: Cambiar solamente lo que viene despu√©s de "(Run Cypress)"
#todo: Utiliza el mismo nombre de la Historia de Usuario con su ID.
name: üß™Cypress In-Sprint Testing
#todo: Solamente colocar el ID de la US que se va a correr. Cambiar el actual:
run-name: ${{github.actor}}üë®üèª‚Äçüî¨ ran TestSuite in ${{github.ref_name}}

# on:
#     push:
#         branches-ignore: [main, QA]
#*Esto indica que se ejecutar√° con PUSH o MERGE en cualquier rama que no sea 'main' ni 'QA'

on: [workflow_dispatch] #Esta opci√≥n es  para este Tutorial, para que no se ejecute en CI.

jobs:
    #* Este es un Nombre de este Job, puedes dejarlo como est√°.
    TestSuite:
        #* Este par√°metro indica que se correr√° en un Sistema Operativo. No cambiar.
        runs-on: ubuntu-latest

        #todo: Aqu√≠ a continuaci√≥n vamos a definir qu√© vamos a correr de Postman:
        steps:
            #* Este paso, copia y pega literalmente el repo que tenemos.
            - name: üìòCheckout Repo
              uses: actions/checkout@v3
              #* el Name es opcional, e indica el nombre del Step. Uses es la dependencia.

            - name: üì¶Set up Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: 16
              #* El with se usa para indicar qu√© par√°metro se usa con la dependencia.
              #* Considera que el with depender√° del uso de la dependencia.

            - name: üíæInstalling Dependencies
              run: |
                  npm ci
                  npm list
              #* El CI en npm es buena pr√°ctica para instalar dependencias en lugar de npm i, y list es para listar y verlas.

              #* Esta dependencia de CI es exclusiva de Cypress que nos permite ejecutar sin necesidad de hacer el build.
              #! AQU√ç DEBES MODIFICAR el Test Suite a ejecutar.
              #todo: Agrega el tu path de archivo cypress en el npm run file:
            - name: üß™Cypress Run Test Coverage in Chrome
              uses: cypress-io/github-action@v4
              with:
                  browser: chrome
                  command: | #EDITAR AQU√ç EL ARCHIVO SUITE A EJECUTAR:
                      npm run file cypress/e2e/Tests/Elements/GX-10497-Buttons.cy.js

            #* Esto es para guardar el reporte previamente generado y colocarlo en Github.
            - name: üìäUpload Artifact ‚òïMochawesome HTML Report
              if: always()
              uses: actions/upload-artifact@v3
              with:
                  name: mochaTest-report
                  path: mochawesome-report
            #* if: always() es un comando YML condicional: Si pasa o no el paso anterior, corre este Paso.

            #todo: IMPORTING JIRA...
            - name: ‚úÖImport Test Results to Xray
              if: always()
              uses: mikepenz/xray-action@v2
              with: #! EDITAR AQU√ç EL TEST EXECUTION (TX) DE JIRA DONDE SE CARGAR√ÅN LOS TESTS:
                  username: ${{secrets.XRAY_CLIENT_ID}}
                  password: ${{secrets.XRAY_CLIENT_SECRET}}
                  testFormat: 'junit'
                  testPaths: 'reports/test-results.xml'
                  #todo: CAMBIA el TX por tu propio TX de tu tarea.
                  testExecKey: 'GX-1'
                  #todo: CAMBIA el ID del Proyecto del que pertenece tu tarea.
                  projectKey: 'GX'
